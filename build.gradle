/*
 * Copyright 2016 Open mHealth
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    ext {
        springBootVersion = "1.3.3.RELEASE"
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

allprojects {
    group = "org.openmhealth"
    version = "1.0.0-SNAPSHOT"

    repositories {
        mavenLocal()
        jcenter()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "spring-boot" // used for auto-configuration

    ext {
        javaVersion = 1.8

        guavaVersion = "19.0"
        javaxElApiVersion = "3.0.0"
        jsr305Version = "3.0.1"
        mailApiVersion = "1.5.2"
        omhSchemaSdkVersion = "1.0.5"
        validationApiVersion = "1.1.0.Final"
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    dependencies {
        compile "com.fasterxml.jackson.core:jackson-core"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        compile "org.slf4j:slf4j-api"
        compile "org.springframework:spring-beans"
        compile "org.springframework.boot:spring-boot"
        compile "org.springframework.boot:spring-boot-autoconfigure"
        compile "org.springframework:spring-context"
        compile "org.springframework.security.oauth:spring-security-oauth2"

        testCompile "org.hamcrest:hamcrest-library"
        testCompile "junit:junit"
        testCompile "org.mockito:mockito-core"
        testCompile "org.springframework:spring-test"

        runtime "org.slf4j:jcl-over-slf4j"
        runtime "org.slf4j:log4j-over-slf4j"
        runtime "ch.qos.logback:logback-classic"
        runtime "org.yaml:snakeyaml"
    }
}

configure([
        project(":authorization-server"),
        project(":resource-server")]) {

    task copyArchiveJarToDockerContext(dependsOn: assemble, type: Copy) {
        from "build/libs"
        into "docker"
        include "${jar.archiveName}"
        rename { String fileName ->
            fileName.replace("${jar.archiveName}", "${jar.baseName}.jar")
        }
    }
    build.dependsOn copyArchiveJarToDockerContext
}

// FIXME add integration test support

task wrapper(type: Wrapper) {
    gradleVersion = "2.12"
}
